// Code generated by MockGen. DO NOT EDIT.
// Source: ./redis_cache.go

// Package mock_redis_cache is a generated GoMock package.
package mock_redis_cache

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRedisCache is a mock of IRedisCache interface.
type MockIRedisCache struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisCacheMockRecorder
}

// MockIRedisCacheMockRecorder is the mock recorder for MockIRedisCache.
type MockIRedisCacheMockRecorder struct {
	mock *MockIRedisCache
}

// NewMockIRedisCache creates a new mock instance.
func NewMockIRedisCache(ctrl *gomock.Controller) *MockIRedisCache {
	mock := &MockIRedisCache{ctrl: ctrl}
	mock.recorder = &MockIRedisCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisCache) EXPECT() *MockIRedisCacheMockRecorder {
	return m.recorder
}

// GetValue mocks base method.
func (m *MockIRedisCache) GetValue(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockIRedisCacheMockRecorder) GetValue(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockIRedisCache)(nil).GetValue), ctx, key)
}

// SetKeyValue mocks base method.
func (m *MockIRedisCache) SetKeyValue(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeyValue", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeyValue indicates an expected call of SetKeyValue.
func (mr *MockIRedisCacheMockRecorder) SetKeyValue(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyValue", reflect.TypeOf((*MockIRedisCache)(nil).SetKeyValue), ctx, key, value)
}
