// Code generated by MockGen. DO NOT EDIT.
// Source: ./vote_domain.go

// Package mock_vote_domain is a generated GoMock package.
package mock_vote_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVoteDomain is a mock of IVoteDomain interface.
type MockIVoteDomain struct {
	ctrl     *gomock.Controller
	recorder *MockIVoteDomainMockRecorder
}

// MockIVoteDomainMockRecorder is the mock recorder for MockIVoteDomain.
type MockIVoteDomainMockRecorder struct {
	mock *MockIVoteDomain
}

// NewMockIVoteDomain creates a new mock instance.
func NewMockIVoteDomain(ctrl *gomock.Controller) *MockIVoteDomain {
	mock := &MockIVoteDomain{ctrl: ctrl}
	mock.recorder = &MockIVoteDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVoteDomain) EXPECT() *MockIVoteDomainMockRecorder {
	return m.recorder
}

// UnVoteCandidate mocks base method.
func (m *MockIVoteDomain) UnVoteCandidate(ctx context.Context, candidateID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVoteCandidate", ctx, candidateID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnVoteCandidate indicates an expected call of UnVoteCandidate.
func (mr *MockIVoteDomainMockRecorder) UnVoteCandidate(ctx, candidateID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVoteCandidate", reflect.TypeOf((*MockIVoteDomain)(nil).UnVoteCandidate), ctx, candidateID, userID)
}

// VoteCandidate mocks base method.
func (m *MockIVoteDomain) VoteCandidate(ctx context.Context, candidateID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteCandidate", ctx, candidateID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VoteCandidate indicates an expected call of VoteCandidate.
func (mr *MockIVoteDomainMockRecorder) VoteCandidate(ctx, candidateID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteCandidate", reflect.TypeOf((*MockIVoteDomain)(nil).VoteCandidate), ctx, candidateID, userID)
}
