// Code generated by MockGen. DO NOT EDIT.
// Source: ./get_all_candidate.go

// Package mock_queries is a generated GoMock package.
package mock_queries

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	candidate "github.com/pathai95441/muang_thai_vote_service/src/repositories/candidate"
)

// MockIGetAllCandidateQuery is a mock of IGetAllCandidateQuery interface.
type MockIGetAllCandidateQuery struct {
	ctrl     *gomock.Controller
	recorder *MockIGetAllCandidateQueryMockRecorder
}

// MockIGetAllCandidateQueryMockRecorder is the mock recorder for MockIGetAllCandidateQuery.
type MockIGetAllCandidateQueryMockRecorder struct {
	mock *MockIGetAllCandidateQuery
}

// NewMockIGetAllCandidateQuery creates a new mock instance.
func NewMockIGetAllCandidateQuery(ctrl *gomock.Controller) *MockIGetAllCandidateQuery {
	mock := &MockIGetAllCandidateQuery{ctrl: ctrl}
	mock.recorder = &MockIGetAllCandidateQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetAllCandidateQuery) EXPECT() *MockIGetAllCandidateQueryMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIGetAllCandidateQuery) Handle(ctx context.Context, orderBy *string) (*[]candidate.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, orderBy)
	ret0, _ := ret[0].(*[]candidate.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIGetAllCandidateQueryMockRecorder) Handle(ctx, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIGetAllCandidateQuery)(nil).Handle), ctx, orderBy)
}
