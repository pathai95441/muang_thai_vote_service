// Code generated by MockGen. DO NOT EDIT.
// Source: ./add_new_candidate.go

// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	commands "github.com/pathai95441/muang_thai_vote_service/src/services/commands"
)

// MockIAddNewCandidateHandler is a mock of IAddNewCandidateHandler interface.
type MockIAddNewCandidateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIAddNewCandidateHandlerMockRecorder
}

// MockIAddNewCandidateHandlerMockRecorder is the mock recorder for MockIAddNewCandidateHandler.
type MockIAddNewCandidateHandlerMockRecorder struct {
	mock *MockIAddNewCandidateHandler
}

// NewMockIAddNewCandidateHandler creates a new mock instance.
func NewMockIAddNewCandidateHandler(ctrl *gomock.Controller) *MockIAddNewCandidateHandler {
	mock := &MockIAddNewCandidateHandler{ctrl: ctrl}
	mock.recorder = &MockIAddNewCandidateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAddNewCandidateHandler) EXPECT() *MockIAddNewCandidateHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIAddNewCandidateHandler) Handle(ctx context.Context, cmd commands.AddNewCandidateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockIAddNewCandidateHandlerMockRecorder) Handle(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIAddNewCandidateHandler)(nil).Handle), ctx, cmd)
}
