// Code generated by MockGen. DO NOT EDIT.
// Source: ./vote_candidate.go

// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	commands "github.com/pathai95441/muang_thai_vote_service/src/services/commands"
)

// MockIVoteCandidateHandler is a mock of IVoteCandidateHandler interface.
type MockIVoteCandidateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIVoteCandidateHandlerMockRecorder
}

// MockIVoteCandidateHandlerMockRecorder is the mock recorder for MockIVoteCandidateHandler.
type MockIVoteCandidateHandlerMockRecorder struct {
	mock *MockIVoteCandidateHandler
}

// NewMockIVoteCandidateHandler creates a new mock instance.
func NewMockIVoteCandidateHandler(ctrl *gomock.Controller) *MockIVoteCandidateHandler {
	mock := &MockIVoteCandidateHandler{ctrl: ctrl}
	mock.recorder = &MockIVoteCandidateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVoteCandidateHandler) EXPECT() *MockIVoteCandidateHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIVoteCandidateHandler) Handle(ctx context.Context, cmd commands.VoteCandidateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockIVoteCandidateHandlerMockRecorder) Handle(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIVoteCandidateHandler)(nil).Handle), ctx, cmd)
}
