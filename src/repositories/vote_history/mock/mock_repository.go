// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vote_history "github.com/pathai95441/muang_thai_vote_service/src/repositories/vote_history"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CountVote mocks base method.
func (m *MockIRepository) CountVote(ctx context.Context, candidateID string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVote", ctx, candidateID)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVote indicates an expected call of CountVote.
func (mr *MockIRepositoryMockRecorder) CountVote(ctx, candidateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVote", reflect.TypeOf((*MockIRepository)(nil).CountVote), ctx, candidateID)
}

// Insert mocks base method.
func (m *MockIRepository) Insert(ctx context.Context, history vote_history.VoteHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIRepositoryMockRecorder) Insert(ctx, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIRepository)(nil).Insert), ctx, history)
}
