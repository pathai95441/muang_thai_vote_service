// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db_models_gen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Candidate is an object representing the database table.
type Candidate struct {
	ID                   string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CandidateName        string      `boil:"candidate_name" json:"candidate_name" toml:"candidate_name" yaml:"candidate_name"`
	CandidateDescription string      `boil:"candidate_description" json:"candidate_description" toml:"candidate_description" yaml:"candidate_description"`
	VoteScore            string      `boil:"vote_score" json:"vote_score" toml:"vote_score" yaml:"vote_score"`
	CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy            string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdatedBy            null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	DeletedAt            null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	DeletedBy            null.String `boil:"deleted_by" json:"deleted_by,omitempty" toml:"deleted_by" yaml:"deleted_by,omitempty"`

	R *candidateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L candidateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CandidateColumns = struct {
	ID                   string
	CandidateName        string
	CandidateDescription string
	VoteScore            string
	CreatedAt            string
	CreatedBy            string
	UpdatedAt            string
	UpdatedBy            string
	DeletedAt            string
	DeletedBy            string
}{
	ID:                   "id",
	CandidateName:        "candidate_name",
	CandidateDescription: "candidate_description",
	VoteScore:            "vote_score",
	CreatedAt:            "created_at",
	CreatedBy:            "created_by",
	UpdatedAt:            "updated_at",
	UpdatedBy:            "updated_by",
	DeletedAt:            "deleted_at",
	DeletedBy:            "deleted_by",
}

var CandidateTableColumns = struct {
	ID                   string
	CandidateName        string
	CandidateDescription string
	VoteScore            string
	CreatedAt            string
	CreatedBy            string
	UpdatedAt            string
	UpdatedBy            string
	DeletedAt            string
	DeletedBy            string
}{
	ID:                   "candidate.id",
	CandidateName:        "candidate.candidate_name",
	CandidateDescription: "candidate.candidate_description",
	VoteScore:            "candidate.vote_score",
	CreatedAt:            "candidate.created_at",
	CreatedBy:            "candidate.created_by",
	UpdatedAt:            "candidate.updated_at",
	UpdatedBy:            "candidate.updated_by",
	DeletedAt:            "candidate.deleted_at",
	DeletedBy:            "candidate.deleted_by",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CandidateWhere = struct {
	ID                   whereHelperstring
	CandidateName        whereHelperstring
	CandidateDescription whereHelperstring
	VoteScore            whereHelperstring
	CreatedAt            whereHelpertime_Time
	CreatedBy            whereHelperstring
	UpdatedAt            whereHelpernull_Time
	UpdatedBy            whereHelpernull_String
	DeletedAt            whereHelpernull_Time
	DeletedBy            whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "`candidate`.`id`"},
	CandidateName:        whereHelperstring{field: "`candidate`.`candidate_name`"},
	CandidateDescription: whereHelperstring{field: "`candidate`.`candidate_description`"},
	VoteScore:            whereHelperstring{field: "`candidate`.`vote_score`"},
	CreatedAt:            whereHelpertime_Time{field: "`candidate`.`created_at`"},
	CreatedBy:            whereHelperstring{field: "`candidate`.`created_by`"},
	UpdatedAt:            whereHelpernull_Time{field: "`candidate`.`updated_at`"},
	UpdatedBy:            whereHelpernull_String{field: "`candidate`.`updated_by`"},
	DeletedAt:            whereHelpernull_Time{field: "`candidate`.`deleted_at`"},
	DeletedBy:            whereHelpernull_String{field: "`candidate`.`deleted_by`"},
}

// CandidateRels is where relationship names are stored.
var CandidateRels = struct {
	VoteHistories string
}{
	VoteHistories: "VoteHistories",
}

// candidateR is where relationships are stored.
type candidateR struct {
	VoteHistories VoteHistorySlice `boil:"VoteHistories" json:"VoteHistories" toml:"VoteHistories" yaml:"VoteHistories"`
}

// NewStruct creates a new relationship struct
func (*candidateR) NewStruct() *candidateR {
	return &candidateR{}
}

func (r *candidateR) GetVoteHistories() VoteHistorySlice {
	if r == nil {
		return nil
	}
	return r.VoteHistories
}

// candidateL is where Load methods for each relationship are stored.
type candidateL struct{}

var (
	candidateAllColumns            = []string{"id", "candidate_name", "candidate_description", "vote_score", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by"}
	candidateColumnsWithoutDefault = []string{"id", "candidate_name", "candidate_description", "vote_score", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by"}
	candidateColumnsWithDefault    = []string{"created_at"}
	candidatePrimaryKeyColumns     = []string{"id"}
	candidateGeneratedColumns      = []string{}
)

type (
	// CandidateSlice is an alias for a slice of pointers to Candidate.
	// This should almost always be used instead of []Candidate.
	CandidateSlice []*Candidate
	// CandidateHook is the signature for custom Candidate hook methods
	CandidateHook func(context.Context, boil.ContextExecutor, *Candidate) error

	candidateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	candidateType                 = reflect.TypeOf(&Candidate{})
	candidateMapping              = queries.MakeStructMapping(candidateType)
	candidatePrimaryKeyMapping, _ = queries.BindMapping(candidateType, candidateMapping, candidatePrimaryKeyColumns)
	candidateInsertCacheMut       sync.RWMutex
	candidateInsertCache          = make(map[string]insertCache)
	candidateUpdateCacheMut       sync.RWMutex
	candidateUpdateCache          = make(map[string]updateCache)
	candidateUpsertCacheMut       sync.RWMutex
	candidateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var candidateAfterSelectHooks []CandidateHook

var candidateBeforeInsertHooks []CandidateHook
var candidateAfterInsertHooks []CandidateHook

var candidateBeforeUpdateHooks []CandidateHook
var candidateAfterUpdateHooks []CandidateHook

var candidateBeforeDeleteHooks []CandidateHook
var candidateAfterDeleteHooks []CandidateHook

var candidateBeforeUpsertHooks []CandidateHook
var candidateAfterUpsertHooks []CandidateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Candidate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Candidate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Candidate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Candidate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Candidate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Candidate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Candidate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Candidate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Candidate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range candidateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCandidateHook registers your hook function for all future operations.
func AddCandidateHook(hookPoint boil.HookPoint, candidateHook CandidateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		candidateAfterSelectHooks = append(candidateAfterSelectHooks, candidateHook)
	case boil.BeforeInsertHook:
		candidateBeforeInsertHooks = append(candidateBeforeInsertHooks, candidateHook)
	case boil.AfterInsertHook:
		candidateAfterInsertHooks = append(candidateAfterInsertHooks, candidateHook)
	case boil.BeforeUpdateHook:
		candidateBeforeUpdateHooks = append(candidateBeforeUpdateHooks, candidateHook)
	case boil.AfterUpdateHook:
		candidateAfterUpdateHooks = append(candidateAfterUpdateHooks, candidateHook)
	case boil.BeforeDeleteHook:
		candidateBeforeDeleteHooks = append(candidateBeforeDeleteHooks, candidateHook)
	case boil.AfterDeleteHook:
		candidateAfterDeleteHooks = append(candidateAfterDeleteHooks, candidateHook)
	case boil.BeforeUpsertHook:
		candidateBeforeUpsertHooks = append(candidateBeforeUpsertHooks, candidateHook)
	case boil.AfterUpsertHook:
		candidateAfterUpsertHooks = append(candidateAfterUpsertHooks, candidateHook)
	}
}

// One returns a single candidate record from the query.
func (q candidateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Candidate, error) {
	o := &Candidate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db_models_gen: failed to execute a one query for candidate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Candidate records from the query.
func (q candidateQuery) All(ctx context.Context, exec boil.ContextExecutor) (CandidateSlice, error) {
	var o []*Candidate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db_models_gen: failed to assign all query results to Candidate slice")
	}

	if len(candidateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Candidate records in the query.
func (q candidateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to count candidate rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q candidateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db_models_gen: failed to check if candidate exists")
	}

	return count > 0, nil
}

// VoteHistories retrieves all the vote_history's VoteHistories with an executor.
func (o *Candidate) VoteHistories(mods ...qm.QueryMod) voteHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`vote_history`.`candidate_id`=?", o.ID),
	)

	return VoteHistories(queryMods...)
}

// LoadVoteHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (candidateL) LoadVoteHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCandidate interface{}, mods queries.Applicator) error {
	var slice []*Candidate
	var object *Candidate

	if singular {
		object = maybeCandidate.(*Candidate)
	} else {
		slice = *maybeCandidate.(*[]*Candidate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &candidateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &candidateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vote_history`),
		qm.WhereIn(`vote_history.candidate_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vote_history")
	}

	var resultSlice []*VoteHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vote_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vote_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vote_history")
	}

	if len(voteHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VoteHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voteHistoryR{}
			}
			foreign.R.Candidate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CandidateID {
				local.R.VoteHistories = append(local.R.VoteHistories, foreign)
				if foreign.R == nil {
					foreign.R = &voteHistoryR{}
				}
				foreign.R.Candidate = local
				break
			}
		}
	}

	return nil
}

// AddVoteHistories adds the given related objects to the existing relationships
// of the candidate, optionally inserting them as new records.
// Appends related to o.R.VoteHistories.
// Sets related.R.Candidate appropriately.
func (o *Candidate) AddVoteHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoteHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CandidateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `vote_history` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"candidate_id"}),
				strmangle.WhereClause("`", "`", 0, voteHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CandidateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &candidateR{
			VoteHistories: related,
		}
	} else {
		o.R.VoteHistories = append(o.R.VoteHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voteHistoryR{
				Candidate: o,
			}
		} else {
			rel.R.Candidate = o
		}
	}
	return nil
}

// Candidates retrieves all the records using an executor.
func Candidates(mods ...qm.QueryMod) candidateQuery {
	mods = append(mods, qm.From("`candidate`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`candidate`.*"})
	}

	return candidateQuery{q}
}

// FindCandidate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCandidate(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Candidate, error) {
	candidateObj := &Candidate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `candidate` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, candidateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db_models_gen: unable to select from candidate")
	}

	if err = candidateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return candidateObj, err
	}

	return candidateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Candidate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db_models_gen: no candidate provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(candidateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	candidateInsertCacheMut.RLock()
	cache, cached := candidateInsertCache[key]
	candidateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			candidateAllColumns,
			candidateColumnsWithDefault,
			candidateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(candidateType, candidateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(candidateType, candidateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `candidate` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `candidate` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `candidate` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, candidatePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to insert into candidate")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to populate default values for candidate")
	}

CacheNoHooks:
	if !cached {
		candidateInsertCacheMut.Lock()
		candidateInsertCache[key] = cache
		candidateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Candidate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Candidate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	candidateUpdateCacheMut.RLock()
	cache, cached := candidateUpdateCache[key]
	candidateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			candidateAllColumns,
			candidatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db_models_gen: unable to update candidate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `candidate` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, candidatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(candidateType, candidateMapping, append(wl, candidatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to update candidate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to get rows affected by update for candidate")
	}

	if !cached {
		candidateUpdateCacheMut.Lock()
		candidateUpdateCache[key] = cache
		candidateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q candidateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to update all for candidate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to retrieve rows affected for candidate")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CandidateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db_models_gen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), candidatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `candidate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, candidatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to update all in candidate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to retrieve rows affected all in update all candidate")
	}
	return rowsAff, nil
}

var mySQLCandidateUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Candidate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db_models_gen: no candidate provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(candidateColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCandidateUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	candidateUpsertCacheMut.RLock()
	cache, cached := candidateUpsertCache[key]
	candidateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			candidateAllColumns,
			candidateColumnsWithDefault,
			candidateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			candidateAllColumns,
			candidatePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("db_models_gen: unable to upsert candidate, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`candidate`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `candidate` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(candidateType, candidateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(candidateType, candidateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to upsert for candidate")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(candidateType, candidateMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to retrieve unique values for candidate")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to populate default values for candidate")
	}

CacheNoHooks:
	if !cached {
		candidateUpsertCacheMut.Lock()
		candidateUpsertCache[key] = cache
		candidateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Candidate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Candidate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db_models_gen: no Candidate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), candidatePrimaryKeyMapping)
	sql := "DELETE FROM `candidate` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to delete from candidate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to get rows affected by delete for candidate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q candidateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db_models_gen: no candidateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to delete all from candidate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to get rows affected by deleteall for candidate")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CandidateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(candidateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), candidatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `candidate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, candidatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to delete all from candidate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to get rows affected by deleteall for candidate")
	}

	if len(candidateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Candidate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCandidate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CandidateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CandidateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), candidatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `candidate`.* FROM `candidate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, candidatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to reload all in CandidateSlice")
	}

	*o = slice

	return nil
}

// CandidateExists checks if the Candidate row exists.
func CandidateExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `candidate` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db_models_gen: unable to check if candidate exists")
	}

	return exists, nil
}
