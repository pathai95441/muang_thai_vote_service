// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db_models_gen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoteConfig is an object representing the database table.
type VoteConfig struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	VoteClose int8        `boil:"vote_close" json:"vote_close" toml:"vote_close" yaml:"vote_close"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	DeletedBy null.String `boil:"deleted_by" json:"deleted_by,omitempty" toml:"deleted_by" yaml:"deleted_by,omitempty"`

	R *voteConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voteConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoteConfigColumns = struct {
	ID        string
	VoteClose string
	CreatedAt string
	CreatedBy string
	UpdatedAt string
	UpdatedBy string
	DeletedAt string
	DeletedBy string
}{
	ID:        "id",
	VoteClose: "vote_close",
	CreatedAt: "created_at",
	CreatedBy: "created_by",
	UpdatedAt: "updated_at",
	UpdatedBy: "updated_by",
	DeletedAt: "deleted_at",
	DeletedBy: "deleted_by",
}

var VoteConfigTableColumns = struct {
	ID        string
	VoteClose string
	CreatedAt string
	CreatedBy string
	UpdatedAt string
	UpdatedBy string
	DeletedAt string
	DeletedBy string
}{
	ID:        "vote_config.id",
	VoteClose: "vote_config.vote_close",
	CreatedAt: "vote_config.created_at",
	CreatedBy: "vote_config.created_by",
	UpdatedAt: "vote_config.updated_at",
	UpdatedBy: "vote_config.updated_by",
	DeletedAt: "vote_config.deleted_at",
	DeletedBy: "vote_config.deleted_by",
}

// Generated where

type whereHelperint8 struct{ field string }

func (w whereHelperint8) EQ(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint8) NEQ(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint8) LT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint8) LTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint8) GT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint8) GTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint8) IN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint8) NIN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var VoteConfigWhere = struct {
	ID        whereHelperint
	VoteClose whereHelperint8
	CreatedAt whereHelpertime_Time
	CreatedBy whereHelperstring
	UpdatedAt whereHelpernull_Time
	UpdatedBy whereHelpernull_String
	DeletedAt whereHelpernull_Time
	DeletedBy whereHelpernull_String
}{
	ID:        whereHelperint{field: "`vote_config`.`id`"},
	VoteClose: whereHelperint8{field: "`vote_config`.`vote_close`"},
	CreatedAt: whereHelpertime_Time{field: "`vote_config`.`created_at`"},
	CreatedBy: whereHelperstring{field: "`vote_config`.`created_by`"},
	UpdatedAt: whereHelpernull_Time{field: "`vote_config`.`updated_at`"},
	UpdatedBy: whereHelpernull_String{field: "`vote_config`.`updated_by`"},
	DeletedAt: whereHelpernull_Time{field: "`vote_config`.`deleted_at`"},
	DeletedBy: whereHelpernull_String{field: "`vote_config`.`deleted_by`"},
}

// VoteConfigRels is where relationship names are stored.
var VoteConfigRels = struct {
}{}

// voteConfigR is where relationships are stored.
type voteConfigR struct {
}

// NewStruct creates a new relationship struct
func (*voteConfigR) NewStruct() *voteConfigR {
	return &voteConfigR{}
}

// voteConfigL is where Load methods for each relationship are stored.
type voteConfigL struct{}

var (
	voteConfigAllColumns            = []string{"id", "vote_close", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by"}
	voteConfigColumnsWithoutDefault = []string{"id", "vote_close", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by"}
	voteConfigColumnsWithDefault    = []string{"created_at"}
	voteConfigPrimaryKeyColumns     = []string{"id"}
	voteConfigGeneratedColumns      = []string{}
)

type (
	// VoteConfigSlice is an alias for a slice of pointers to VoteConfig.
	// This should almost always be used instead of []VoteConfig.
	VoteConfigSlice []*VoteConfig
	// VoteConfigHook is the signature for custom VoteConfig hook methods
	VoteConfigHook func(context.Context, boil.ContextExecutor, *VoteConfig) error

	voteConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voteConfigType                 = reflect.TypeOf(&VoteConfig{})
	voteConfigMapping              = queries.MakeStructMapping(voteConfigType)
	voteConfigPrimaryKeyMapping, _ = queries.BindMapping(voteConfigType, voteConfigMapping, voteConfigPrimaryKeyColumns)
	voteConfigInsertCacheMut       sync.RWMutex
	voteConfigInsertCache          = make(map[string]insertCache)
	voteConfigUpdateCacheMut       sync.RWMutex
	voteConfigUpdateCache          = make(map[string]updateCache)
	voteConfigUpsertCacheMut       sync.RWMutex
	voteConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var voteConfigAfterSelectHooks []VoteConfigHook

var voteConfigBeforeInsertHooks []VoteConfigHook
var voteConfigAfterInsertHooks []VoteConfigHook

var voteConfigBeforeUpdateHooks []VoteConfigHook
var voteConfigAfterUpdateHooks []VoteConfigHook

var voteConfigBeforeDeleteHooks []VoteConfigHook
var voteConfigAfterDeleteHooks []VoteConfigHook

var voteConfigBeforeUpsertHooks []VoteConfigHook
var voteConfigAfterUpsertHooks []VoteConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VoteConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VoteConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VoteConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VoteConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VoteConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VoteConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VoteConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VoteConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VoteConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoteConfigHook registers your hook function for all future operations.
func AddVoteConfigHook(hookPoint boil.HookPoint, voteConfigHook VoteConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		voteConfigAfterSelectHooks = append(voteConfigAfterSelectHooks, voteConfigHook)
	case boil.BeforeInsertHook:
		voteConfigBeforeInsertHooks = append(voteConfigBeforeInsertHooks, voteConfigHook)
	case boil.AfterInsertHook:
		voteConfigAfterInsertHooks = append(voteConfigAfterInsertHooks, voteConfigHook)
	case boil.BeforeUpdateHook:
		voteConfigBeforeUpdateHooks = append(voteConfigBeforeUpdateHooks, voteConfigHook)
	case boil.AfterUpdateHook:
		voteConfigAfterUpdateHooks = append(voteConfigAfterUpdateHooks, voteConfigHook)
	case boil.BeforeDeleteHook:
		voteConfigBeforeDeleteHooks = append(voteConfigBeforeDeleteHooks, voteConfigHook)
	case boil.AfterDeleteHook:
		voteConfigAfterDeleteHooks = append(voteConfigAfterDeleteHooks, voteConfigHook)
	case boil.BeforeUpsertHook:
		voteConfigBeforeUpsertHooks = append(voteConfigBeforeUpsertHooks, voteConfigHook)
	case boil.AfterUpsertHook:
		voteConfigAfterUpsertHooks = append(voteConfigAfterUpsertHooks, voteConfigHook)
	}
}

// One returns a single voteConfig record from the query.
func (q voteConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VoteConfig, error) {
	o := &VoteConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db_models_gen: failed to execute a one query for vote_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VoteConfig records from the query.
func (q voteConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoteConfigSlice, error) {
	var o []*VoteConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db_models_gen: failed to assign all query results to VoteConfig slice")
	}

	if len(voteConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VoteConfig records in the query.
func (q voteConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to count vote_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voteConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db_models_gen: failed to check if vote_config exists")
	}

	return count > 0, nil
}

// VoteConfigs retrieves all the records using an executor.
func VoteConfigs(mods ...qm.QueryMod) voteConfigQuery {
	mods = append(mods, qm.From("`vote_config`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`vote_config`.*"})
	}

	return voteConfigQuery{q}
}

// FindVoteConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoteConfig(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VoteConfig, error) {
	voteConfigObj := &VoteConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `vote_config` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, voteConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db_models_gen: unable to select from vote_config")
	}

	if err = voteConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return voteConfigObj, err
	}

	return voteConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoteConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db_models_gen: no vote_config provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voteConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voteConfigInsertCacheMut.RLock()
	cache, cached := voteConfigInsertCache[key]
	voteConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voteConfigAllColumns,
			voteConfigColumnsWithDefault,
			voteConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voteConfigType, voteConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voteConfigType, voteConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `vote_config` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `vote_config` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `vote_config` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, voteConfigPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to insert into vote_config")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to populate default values for vote_config")
	}

CacheNoHooks:
	if !cached {
		voteConfigInsertCacheMut.Lock()
		voteConfigInsertCache[key] = cache
		voteConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VoteConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoteConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voteConfigUpdateCacheMut.RLock()
	cache, cached := voteConfigUpdateCache[key]
	voteConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voteConfigAllColumns,
			voteConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db_models_gen: unable to update vote_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `vote_config` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, voteConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voteConfigType, voteConfigMapping, append(wl, voteConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to update vote_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to get rows affected by update for vote_config")
	}

	if !cached {
		voteConfigUpdateCacheMut.Lock()
		voteConfigUpdateCache[key] = cache
		voteConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voteConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to update all for vote_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to retrieve rows affected for vote_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoteConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db_models_gen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voteConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `vote_config` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, voteConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to update all in voteConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to retrieve rows affected all in update all voteConfig")
	}
	return rowsAff, nil
}

var mySQLVoteConfigUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoteConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db_models_gen: no vote_config provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voteConfigColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLVoteConfigUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voteConfigUpsertCacheMut.RLock()
	cache, cached := voteConfigUpsertCache[key]
	voteConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voteConfigAllColumns,
			voteConfigColumnsWithDefault,
			voteConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voteConfigAllColumns,
			voteConfigPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("db_models_gen: unable to upsert vote_config, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`vote_config`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `vote_config` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(voteConfigType, voteConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voteConfigType, voteConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to upsert for vote_config")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(voteConfigType, voteConfigMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to retrieve unique values for vote_config")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to populate default values for vote_config")
	}

CacheNoHooks:
	if !cached {
		voteConfigUpsertCacheMut.Lock()
		voteConfigUpsertCache[key] = cache
		voteConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VoteConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoteConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db_models_gen: no VoteConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voteConfigPrimaryKeyMapping)
	sql := "DELETE FROM `vote_config` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to delete from vote_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to get rows affected by delete for vote_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voteConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db_models_gen: no voteConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to delete all from vote_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to get rows affected by deleteall for vote_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoteConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(voteConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voteConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `vote_config` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, voteConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: unable to delete all from voteConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db_models_gen: failed to get rows affected by deleteall for vote_config")
	}

	if len(voteConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoteConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVoteConfig(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoteConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoteConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voteConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `vote_config`.* FROM `vote_config` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, voteConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db_models_gen: unable to reload all in VoteConfigSlice")
	}

	*o = slice

	return nil
}

// VoteConfigExists checks if the VoteConfig row exists.
func VoteConfigExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `vote_config` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db_models_gen: unable to check if vote_config exists")
	}

	return exists, nil
}
