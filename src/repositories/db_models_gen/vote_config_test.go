// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db_models_gen

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVoteConfigs(t *testing.T) {
	t.Parallel()

	query := VoteConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVoteConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoteConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VoteConfigs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoteConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoteConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoteConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoteConfigExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VoteConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoteConfigExists to return true, but got false.")
	}
}

func testVoteConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voteConfigFound, err := FindVoteConfig(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if voteConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVoteConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VoteConfigs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVoteConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VoteConfigs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVoteConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voteConfigOne := &VoteConfig{}
	voteConfigTwo := &VoteConfig{}
	if err = randomize.Struct(seed, voteConfigOne, voteConfigDBTypes, false, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, voteConfigTwo, voteConfigDBTypes, false, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voteConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voteConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoteConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVoteConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voteConfigOne := &VoteConfig{}
	voteConfigTwo := &VoteConfig{}
	if err = randomize.Struct(seed, voteConfigOne, voteConfigDBTypes, false, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, voteConfigTwo, voteConfigDBTypes, false, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voteConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voteConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voteConfigBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func voteConfigAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func voteConfigAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func voteConfigBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func voteConfigAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func voteConfigBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func voteConfigAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func voteConfigBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func voteConfigAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoteConfig) error {
	*o = VoteConfig{}
	return nil
}

func testVoteConfigsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VoteConfig{}
	o := &VoteConfig{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voteConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoteConfig object: %s", err)
	}

	AddVoteConfigHook(boil.BeforeInsertHook, voteConfigBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voteConfigBeforeInsertHooks = []VoteConfigHook{}

	AddVoteConfigHook(boil.AfterInsertHook, voteConfigAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voteConfigAfterInsertHooks = []VoteConfigHook{}

	AddVoteConfigHook(boil.AfterSelectHook, voteConfigAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voteConfigAfterSelectHooks = []VoteConfigHook{}

	AddVoteConfigHook(boil.BeforeUpdateHook, voteConfigBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voteConfigBeforeUpdateHooks = []VoteConfigHook{}

	AddVoteConfigHook(boil.AfterUpdateHook, voteConfigAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voteConfigAfterUpdateHooks = []VoteConfigHook{}

	AddVoteConfigHook(boil.BeforeDeleteHook, voteConfigBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voteConfigBeforeDeleteHooks = []VoteConfigHook{}

	AddVoteConfigHook(boil.AfterDeleteHook, voteConfigAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voteConfigAfterDeleteHooks = []VoteConfigHook{}

	AddVoteConfigHook(boil.BeforeUpsertHook, voteConfigBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voteConfigBeforeUpsertHooks = []VoteConfigHook{}

	AddVoteConfigHook(boil.AfterUpsertHook, voteConfigAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voteConfigAfterUpsertHooks = []VoteConfigHook{}
}

func testVoteConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoteConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voteConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoteConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoteConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoteConfigSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoteConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoteConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voteConfigDBTypes = map[string]string{`ID`: `int`, `VoteClose`: `tinyint`, `CreatedAt`: `timestamp`, `CreatedBy`: `varchar`, `UpdatedAt`: `timestamp`, `UpdatedBy`: `varchar`, `DeletedAt`: `timestamp`, `DeletedBy`: `varchar`}
	_                 = bytes.MinRead
)

func testVoteConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(voteConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voteConfigAllColumns) == len(voteConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVoteConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voteConfigAllColumns) == len(voteConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoteConfig{}
	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voteConfigDBTypes, true, voteConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voteConfigAllColumns, voteConfigPrimaryKeyColumns) {
		fields = voteConfigAllColumns
	} else {
		fields = strmangle.SetComplement(
			voteConfigAllColumns,
			voteConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoteConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVoteConfigsUpsert(t *testing.T) {
	t.Parallel()

	if len(voteConfigAllColumns) == len(voteConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLVoteConfigUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VoteConfig{}
	if err = randomize.Struct(seed, &o, voteConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoteConfig: %s", err)
	}

	count, err := VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voteConfigDBTypes, false, voteConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoteConfig struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoteConfig: %s", err)
	}

	count, err = VoteConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
