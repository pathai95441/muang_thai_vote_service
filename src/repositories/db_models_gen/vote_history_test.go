// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db_models_gen

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVoteHistories(t *testing.T) {
	t.Parallel()

	query := VoteHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVoteHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoteHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VoteHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoteHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoteHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoteHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoteHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VoteHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoteHistoryExists to return true, but got false.")
	}
}

func testVoteHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voteHistoryFound, err := FindVoteHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if voteHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVoteHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VoteHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVoteHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VoteHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVoteHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voteHistoryOne := &VoteHistory{}
	voteHistoryTwo := &VoteHistory{}
	if err = randomize.Struct(seed, voteHistoryOne, voteHistoryDBTypes, false, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, voteHistoryTwo, voteHistoryDBTypes, false, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voteHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voteHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoteHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVoteHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voteHistoryOne := &VoteHistory{}
	voteHistoryTwo := &VoteHistory{}
	if err = randomize.Struct(seed, voteHistoryOne, voteHistoryDBTypes, false, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, voteHistoryTwo, voteHistoryDBTypes, false, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voteHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voteHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voteHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func voteHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func voteHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func voteHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func voteHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func voteHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func voteHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func voteHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func voteHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoteHistory) error {
	*o = VoteHistory{}
	return nil
}

func testVoteHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VoteHistory{}
	o := &VoteHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoteHistory object: %s", err)
	}

	AddVoteHistoryHook(boil.BeforeInsertHook, voteHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voteHistoryBeforeInsertHooks = []VoteHistoryHook{}

	AddVoteHistoryHook(boil.AfterInsertHook, voteHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voteHistoryAfterInsertHooks = []VoteHistoryHook{}

	AddVoteHistoryHook(boil.AfterSelectHook, voteHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voteHistoryAfterSelectHooks = []VoteHistoryHook{}

	AddVoteHistoryHook(boil.BeforeUpdateHook, voteHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voteHistoryBeforeUpdateHooks = []VoteHistoryHook{}

	AddVoteHistoryHook(boil.AfterUpdateHook, voteHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voteHistoryAfterUpdateHooks = []VoteHistoryHook{}

	AddVoteHistoryHook(boil.BeforeDeleteHook, voteHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voteHistoryBeforeDeleteHooks = []VoteHistoryHook{}

	AddVoteHistoryHook(boil.AfterDeleteHook, voteHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voteHistoryAfterDeleteHooks = []VoteHistoryHook{}

	AddVoteHistoryHook(boil.BeforeUpsertHook, voteHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voteHistoryBeforeUpsertHooks = []VoteHistoryHook{}

	AddVoteHistoryHook(boil.AfterUpsertHook, voteHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voteHistoryAfterUpsertHooks = []VoteHistoryHook{}
}

func testVoteHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoteHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voteHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoteHistoryToOneCandidateUsingCandidate(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoteHistory
	var foreign Candidate

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voteHistoryDBTypes, false, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, candidateDBTypes, false, candidateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Candidate struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CandidateID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Candidate().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VoteHistorySlice{&local}
	if err = local.L.LoadCandidate(ctx, tx, false, (*[]*VoteHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Candidate == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Candidate = nil
	if err = local.L.LoadCandidate(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Candidate == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVoteHistoryToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoteHistory
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voteHistoryDBTypes, false, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VoteHistorySlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*VoteHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVoteHistoryToOneSetOpCandidateUsingCandidate(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoteHistory
	var b, c Candidate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voteHistoryDBTypes, false, strmangle.SetComplement(voteHistoryPrimaryKeyColumns, voteHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, candidateDBTypes, false, strmangle.SetComplement(candidatePrimaryKeyColumns, candidateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, candidateDBTypes, false, strmangle.SetComplement(candidatePrimaryKeyColumns, candidateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Candidate{&b, &c} {
		err = a.SetCandidate(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Candidate != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoteHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CandidateID != x.ID {
			t.Error("foreign key was wrong value", a.CandidateID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CandidateID))
		reflect.Indirect(reflect.ValueOf(&a.CandidateID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CandidateID != x.ID {
			t.Error("foreign key was wrong value", a.CandidateID, x.ID)
		}
	}
}
func testVoteHistoryToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoteHistory
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voteHistoryDBTypes, false, strmangle.SetComplement(voteHistoryPrimaryKeyColumns, voteHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoteHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testVoteHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoteHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoteHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoteHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoteHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voteHistoryDBTypes = map[string]string{`ID`: `varchar`, `CandidateID`: `varchar`, `UserID`: `varchar`, `CreatedAt`: `timestamp`, `CreatedBy`: `varchar`, `UpdatedAt`: `timestamp`, `UpdatedBy`: `varchar`, `DeletedAt`: `timestamp`, `DeletedBy`: `varchar`}
	_                  = bytes.MinRead
)

func testVoteHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(voteHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voteHistoryAllColumns) == len(voteHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVoteHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voteHistoryAllColumns) == len(voteHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoteHistory{}
	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voteHistoryDBTypes, true, voteHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voteHistoryAllColumns, voteHistoryPrimaryKeyColumns) {
		fields = voteHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			voteHistoryAllColumns,
			voteHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoteHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVoteHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(voteHistoryAllColumns) == len(voteHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLVoteHistoryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VoteHistory{}
	if err = randomize.Struct(seed, &o, voteHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoteHistory: %s", err)
	}

	count, err := VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voteHistoryDBTypes, false, voteHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoteHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoteHistory: %s", err)
	}

	count, err = VoteHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
