// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db_models_gen

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Candidates", testCandidates)
	t.Run("Roles", testRoles)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Users", testUsers)
	t.Run("VoteConfigs", testVoteConfigs)
	t.Run("VoteHistories", testVoteHistories)
}

func TestDelete(t *testing.T) {
	t.Run("Candidates", testCandidatesDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("VoteConfigs", testVoteConfigsDelete)
	t.Run("VoteHistories", testVoteHistoriesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Candidates", testCandidatesQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("VoteConfigs", testVoteConfigsQueryDeleteAll)
	t.Run("VoteHistories", testVoteHistoriesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Candidates", testCandidatesSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("VoteConfigs", testVoteConfigsSliceDeleteAll)
	t.Run("VoteHistories", testVoteHistoriesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Candidates", testCandidatesExists)
	t.Run("Roles", testRolesExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Users", testUsersExists)
	t.Run("VoteConfigs", testVoteConfigsExists)
	t.Run("VoteHistories", testVoteHistoriesExists)
}

func TestFind(t *testing.T) {
	t.Run("Candidates", testCandidatesFind)
	t.Run("Roles", testRolesFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Users", testUsersFind)
	t.Run("VoteConfigs", testVoteConfigsFind)
	t.Run("VoteHistories", testVoteHistoriesFind)
}

func TestBind(t *testing.T) {
	t.Run("Candidates", testCandidatesBind)
	t.Run("Roles", testRolesBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Users", testUsersBind)
	t.Run("VoteConfigs", testVoteConfigsBind)
	t.Run("VoteHistories", testVoteHistoriesBind)
}

func TestOne(t *testing.T) {
	t.Run("Candidates", testCandidatesOne)
	t.Run("Roles", testRolesOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Users", testUsersOne)
	t.Run("VoteConfigs", testVoteConfigsOne)
	t.Run("VoteHistories", testVoteHistoriesOne)
}

func TestAll(t *testing.T) {
	t.Run("Candidates", testCandidatesAll)
	t.Run("Roles", testRolesAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Users", testUsersAll)
	t.Run("VoteConfigs", testVoteConfigsAll)
	t.Run("VoteHistories", testVoteHistoriesAll)
}

func TestCount(t *testing.T) {
	t.Run("Candidates", testCandidatesCount)
	t.Run("Roles", testRolesCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Users", testUsersCount)
	t.Run("VoteConfigs", testVoteConfigsCount)
	t.Run("VoteHistories", testVoteHistoriesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Candidates", testCandidatesHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("VoteConfigs", testVoteConfigsHooks)
	t.Run("VoteHistories", testVoteHistoriesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Candidates", testCandidatesInsert)
	t.Run("Candidates", testCandidatesInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("VoteConfigs", testVoteConfigsInsert)
	t.Run("VoteConfigs", testVoteConfigsInsertWhitelist)
	t.Run("VoteHistories", testVoteHistoriesInsert)
	t.Run("VoteHistories", testVoteHistoriesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("UserToCandidateUsingVoteCandidate", testUserToOneCandidateUsingVoteCandidate)
	t.Run("UserToRoleUsingRole", testUserToOneRoleUsingRole)
	t.Run("VoteHistoryToCandidateUsingCandidate", testVoteHistoryToOneCandidateUsingCandidate)
	t.Run("VoteHistoryToUserUsingUser", testVoteHistoryToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CandidateToVoteCandidateUsers", testCandidateToManyVoteCandidateUsers)
	t.Run("CandidateToVoteHistories", testCandidateToManyVoteHistories)
	t.Run("RoleToUsers", testRoleToManyUsers)
	t.Run("UserToVoteHistories", testUserToManyVoteHistories)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("UserToCandidateUsingVoteCandidateUsers", testUserToOneSetOpCandidateUsingVoteCandidate)
	t.Run("UserToRoleUsingUsers", testUserToOneSetOpRoleUsingRole)
	t.Run("VoteHistoryToCandidateUsingVoteHistories", testVoteHistoryToOneSetOpCandidateUsingCandidate)
	t.Run("VoteHistoryToUserUsingVoteHistories", testVoteHistoryToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("UserToCandidateUsingVoteCandidateUsers", testUserToOneRemoveOpCandidateUsingVoteCandidate)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CandidateToVoteCandidateUsers", testCandidateToManyAddOpVoteCandidateUsers)
	t.Run("CandidateToVoteHistories", testCandidateToManyAddOpVoteHistories)
	t.Run("RoleToUsers", testRoleToManyAddOpUsers)
	t.Run("UserToVoteHistories", testUserToManyAddOpVoteHistories)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CandidateToVoteCandidateUsers", testCandidateToManySetOpVoteCandidateUsers)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CandidateToVoteCandidateUsers", testCandidateToManyRemoveOpVoteCandidateUsers)
}

func TestReload(t *testing.T) {
	t.Run("Candidates", testCandidatesReload)
	t.Run("Roles", testRolesReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Users", testUsersReload)
	t.Run("VoteConfigs", testVoteConfigsReload)
	t.Run("VoteHistories", testVoteHistoriesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Candidates", testCandidatesReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("VoteConfigs", testVoteConfigsReloadAll)
	t.Run("VoteHistories", testVoteHistoriesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Candidates", testCandidatesSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("VoteConfigs", testVoteConfigsSelect)
	t.Run("VoteHistories", testVoteHistoriesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Candidates", testCandidatesUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("VoteConfigs", testVoteConfigsUpdate)
	t.Run("VoteHistories", testVoteHistoriesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Candidates", testCandidatesSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("VoteConfigs", testVoteConfigsSliceUpdateAll)
	t.Run("VoteHistories", testVoteHistoriesSliceUpdateAll)
}
