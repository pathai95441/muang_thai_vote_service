// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_candidate is a generated GoMock package.
package mock_candidate

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	candidate "github.com/pathai95441/muang_thai_vote_service/src/repositories/candidate"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIRepository) Delete(ctx context.Context, tx *sql.Tx, candidateID, deleteBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, candidateID, deleteBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryMockRecorder) Delete(ctx, tx, candidateID, deleteBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepository)(nil).Delete), ctx, tx, candidateID, deleteBy)
}

// Get mocks base method.
func (m *MockIRepository) Get(ctx context.Context, candidateID string) (*candidate.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, candidateID)
	ret0, _ := ret[0].(*candidate.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRepositoryMockRecorder) Get(ctx, candidateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRepository)(nil).Get), ctx, candidateID)
}

// GetAll mocks base method.
func (m *MockIRepository) GetAll(ctx context.Context, orderBy *string) (*[]candidate.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, orderBy)
	ret0, _ := ret[0].(*[]candidate.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryMockRecorder) GetAll(ctx, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepository)(nil).GetAll), ctx, orderBy)
}

// Insert mocks base method.
func (m *MockIRepository) Insert(ctx context.Context, candidate candidate.Candidate, createBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, candidate, createBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIRepositoryMockRecorder) Insert(ctx, candidate, createBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIRepository)(nil).Insert), ctx, candidate, createBy)
}

// Update mocks base method.
func (m *MockIRepository) Update(ctx context.Context, tx *sql.Tx, candidateID string, candidateName, candidateDescription *string, voteScore *int, updateBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, candidateID, candidateName, candidateDescription, voteScore, updateBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(ctx, tx, candidateID, candidateName, candidateDescription, voteScore, updateBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), ctx, tx, candidateID, candidateName, candidateDescription, voteScore, updateBy)
}
