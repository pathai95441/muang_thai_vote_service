// Package api_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api_gen

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new candidate
	// (POST /candidate)
	CreateNewCandidate(ctx echo.Context) error
	// Update Candidate Info
	// (PUT /candidate)
	UpdateCandidateInfo(ctx echo.Context) error
	// Delete candidate
	// (DELETE /candidate/{candidateID})
	DeleteCandidateByID(ctx echo.Context, candidateID string) error
	// Get All Candidate
	// (POST /candidates)
	GetAllCandidate(ctx echo.Context) error
	// SignIn
	// (POST /sign_in)
	SignIn(ctx echo.Context) error
	// Create new User
	// (POST /user)
	CreateNewUser(ctx echo.Context) error
	// VoteCandidate
	// (POST /vote_candidate)
	VoteCandidate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateNewCandidate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewCandidate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNewCandidate(ctx)
	return err
}

// UpdateCandidateInfo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCandidateInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCandidateInfo(ctx)
	return err
}

// DeleteCandidateByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCandidateByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "candidateID" -------------
	var candidateID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "candidateID", runtime.ParamLocationPath, ctx.Param("candidateID"), &candidateID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter candidateID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCandidateByID(ctx, candidateID)
	return err
}

// GetAllCandidate converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllCandidate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllCandidate(ctx)
	return err
}

// SignIn converts echo context to params.
func (w *ServerInterfaceWrapper) SignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignIn(ctx)
	return err
}

// CreateNewUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNewUser(ctx)
	return err
}

// VoteCandidate converts echo context to params.
func (w *ServerInterfaceWrapper) VoteCandidate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VoteCandidate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/candidate", wrapper.CreateNewCandidate)
	router.PUT(baseURL+"/candidate", wrapper.UpdateCandidateInfo)
	router.DELETE(baseURL+"/candidate/:candidateID", wrapper.DeleteCandidateByID)
	router.POST(baseURL+"/candidates", wrapper.GetAllCandidate)
	router.POST(baseURL+"/sign_in", wrapper.SignIn)
	router.POST(baseURL+"/user", wrapper.CreateNewUser)
	router.POST(baseURL+"/vote_candidate", wrapper.VoteCandidate)

}
