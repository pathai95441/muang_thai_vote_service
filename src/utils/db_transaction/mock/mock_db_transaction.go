// Code generated by MockGen. DO NOT EDIT.
// Source: ./db_transaction.go

// Package mock_db_transaction is a generated GoMock package.
package mock_db_transaction

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db_transaction "github.com/pathai95441/muang_thai_vote_service/src/utils/db_transaction"
)

// MockIWithTxn is a mock of IWithTxn interface.
type MockIWithTxn struct {
	ctrl     *gomock.Controller
	recorder *MockIWithTxnMockRecorder
}

// MockIWithTxnMockRecorder is the mock recorder for MockIWithTxn.
type MockIWithTxnMockRecorder struct {
	mock *MockIWithTxn
}

// NewMockIWithTxn creates a new mock instance.
func NewMockIWithTxn(ctrl *gomock.Controller) *MockIWithTxn {
	mock := &MockIWithTxn{ctrl: ctrl}
	mock.recorder = &MockIWithTxnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWithTxn) EXPECT() *MockIWithTxnMockRecorder {
	return m.recorder
}

// WithTransaction mocks base method.
func (m *MockIWithTxn) WithTransaction(ctx context.Context, statements []db_transaction.Statement, opts ...db_transaction.TransactionOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, statements}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockIWithTxnMockRecorder) WithTransaction(ctx, statements interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, statements}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockIWithTxn)(nil).WithTransaction), varargs...)
}

// WithTransactionWithFunc mocks base method.
func (m *MockIWithTxn) WithTransactionWithFunc(ctx context.Context, fn db_transaction.TxFn, opts ...db_transaction.TransactionOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithTransactionWithFunc", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransactionWithFunc indicates an expected call of WithTransactionWithFunc.
func (mr *MockIWithTxnMockRecorder) WithTransactionWithFunc(ctx, fn interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransactionWithFunc", reflect.TypeOf((*MockIWithTxn)(nil).WithTransactionWithFunc), varargs...)
}
